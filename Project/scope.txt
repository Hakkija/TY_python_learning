1. Decide on the technology stack: You'll need to decide on the front-end technologies you'll use to build your interface. Common choices include JavaScript frameworks like React or Angular, CSS preprocessors like Sass or Less, and HTML templating languages like Jinja or Handlebars.

2. Design the interface: Sketch out a basic wireframe or mockup of your interface. This will help you decide on the layout, functionality, and user flow of your front-end.

3. Choose a backend technology: You'll need a backend server to execute Ansible playbooks and roles. This can be built using a variety of technologies, such as Flask, Django, or Node.js.

4. Connect the frontend to the backend: Use an API to connect the front-end to the back-end. You can use RESTful APIs, GraphQL, or other approaches to connect the two parts of your application.

5. Write Ansible playbooks and roles: Once your front-end and back-end are connected, you'll need to write Ansible playbooks and roles that can be executed from the backend. This will involve defining the tasks and steps required to configure and manage your infrastructure.

6. Execute Ansible tasks: Use Ansible modules to execute tasks and roles on remote servers. You can use modules like shell or command to execute arbitrary shell commands, or more specialized modules like apt or yum to manage packages on your servers.

7. Display results: Finally, you'll want to display the results of your Ansible tasks to the user. This can be done using a variety of visualization tools, such as tables, graphs, or alerts.